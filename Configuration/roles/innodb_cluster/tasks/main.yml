---
- name: Define the primary host (e.g. first host in the group)
  set_fact:
    primary_node: "{{ primary_nodes.split(',')[0] }}"

- name: Define the secondary nodes
  set_fact:
    secondary_nodes: "{{ primary_nodes.split(',')[1:] }}"

- name: Get secondary hosts
  debug:
    var: secondary_nodes

- name: Start MySQL
  service:
    name: mysqld
    state: started

- name: Template bootstrapping js for mysqlsh
  template:
    dest: "/tmp/bootstrap_cluster.js"
    src: templates/bootstrap_cluster.js.j2
    owner: "mysql"
    group: "mysql"
    mode: '0644'

- name: Template Adding Cluster
  template:
    dest: "/tmp/add_instances.js"
    src: templates/add_instances.js.j2
    owner: "mysql"
    group: "mysql"
    mode: '0644'

- name: Template bootstrapping js for mysqlsh
  template:
    dest: "/tmp/bootstrap_clusterset.js"
    src: templates/bootstrap_clusterset.js.j2
    owner: "mysql"
    group: "mysql"
    mode: '0644'

- name: Bootstrap the cluster (new deployment)
  command: mysqlsh -f /tmp/bootstrap_cluster.js
  when: inventory_hostname == "{{ primary_node }}"

- name: Wait to start
  wait_for:
    timeout: 5

- name: Add the other instances
  command: mysqlsh -f /tmp/add_instances.js
  when: inventory_hostname == "{{ primary_node }}"

- name: Wait to start
  wait_for:
    timeout: 10

- name: Bootstrap the clusterset (Replica Cluster)
  command: mysqlsh -f /tmp/bootstrap_clusterset.js
  when: inventory_hostname == "{{ primary_node }}"